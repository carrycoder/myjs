//Q1
//Explain how we can use try, catch and finally to handle errors.
try {
  console.log('inside the try block line 1');
  upto;
} catch (err) {
  console.log(err.message);
} finally {
  console.log('done execution');
}
//in the code above we can see that JS tries to execute the try block.
//comes across line 12 and throws an error.
//that error is then caught by the catch block.
//no matter if there are any errors.
//finally block is always executed.
//---------------------------------

//Q2
//Explain how if errors occur in any line of the code in try block , then following lines are not executed and catch block gets invoked.

try {
  console.log('hello-world');
  bitcoin();
  console.log('bye');
} catch (err) {
  console.log(err.message);
} finally {
  console.log('done');
}

//as we can observe that "bye" was not logged to the console
//which shows that once an error occurs ,immediately
//the error block gets executed and the subsequent lines
//are not executed.

//---------------------------------

//Q3
//What are the 2 main properties of error object generated by JS.

try {
  foobar();
} catch (err) {
  console.log(err);
  console.log(err.name, err.message);
}

// 2 main properties of the error generated by JS are err.name and err.message.

//---------------------------------
//Q4
// use throw statement to create and throw an error with a custom message.

import axios from 'axios';
const myAge = async (name) => {
  try {
    const response = await axios.get(`https://api.agify.io/?name=${name}`);
    if (!response.data.age) {
      throw new Error(`Abey naam toh daal`);
    }
    console.log(response.data.age);
  } catch (err) {
    console.log(err);
  }
};

myAge('saurav');
myAge(1);

//As we can observe on executing the code above that we get the custom error in case of erroneous operation.

//---------------------------------
